apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: continuous-integration-
spec:
  arguments:
    parameters:
      - name: branch
        value: master
      - name: repository
        value: git@github.com:tenlastic/open-platform.git
  entrypoint: pipeline
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
  volumes:
    - name: continuous-deployment-ssh-keys
      secret:
        secretName: continuous-deployment-ssh-keys
        defaultMode: 0600
  templates:
    - name: pipeline
      inputs:
        parameters:
          - name: branch
          - name: repository
      dag:
        tasks:
          - name: checkout
            template: checkout
            arguments:
              parameters:
                - name: branch
                  value: "{{inputs.parameters.branch}}"
                - name: repository
                  value: "{{inputs.parameters.repository}}"

          # - name: continuous-integration-angular
          #   template: continuous-integration-angular
          #   dependencies:
          #     - checkout

          # - name: continuous-integration-nodejs
          #   template: continuous-integration-nodejs
          #   dependencies:
          #     - continuous-integration-angular

          - name: terraform
            template: terraform
            dependencies:
              - checkout
            when: "'{{inputs.parameters.branch}}' == master"

          - name: publish-npm-modules
            template: publish-npm-modules
            dependencies:
              - terraform
            when: "'{{inputs.parameters.branch}}' == master"

          - name: publish-docker-images
            template: publish-docker-images
            dependencies:
              - publish-npm-modules
            when: "'{{inputs.parameters.branch}}' == master"

          - name: publish-electron-applications
            template: publish-electron-applications
            dependencies:
              - publish-docker-images
            when: "'{{inputs.parameters.branch}}' == master"

          - name: publish-miscellaneous-docker-images
            template: publish-miscellaneous-docker-images
            dependencies:
              - publish-electron-applications
            when: "'{{inputs.parameters.branch}}' == master"

    - name: checkout
      script:
        image: alpine/git:latest
        command: [sh]
        source: |
          mkdir -p /root/.ssh/
          echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' > ~/.ssh/known_hosts
          cp /tmp/secrets/continuous-deployment-ssh-keys/id_rsa /root/.ssh/id_rsa
          git clone --branch {{inputs.parameters.branch}} {{inputs.parameters.repository}} /usr/src/app/
        volumeMounts:
          - name: continuous-deployment-ssh-keys
            mountPath: /tmp/secrets/continuous-deployment-ssh-keys/
            readonly: true
          - name: workspace
            mountPath: /usr/src/
      inputs:
        parameters:
          - name: branch
          - name: repository
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: continuous-integration-angular
      container:
        image: node:10
        command: [sh]
        args: [./.argo/continuous-integration-angular.sh]
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: continuous-integration-nodejs
      container:
        image: node:10
        command: [sh]
        args: [./.argo/continuous-integration-nodejs.sh]
        envFrom:
          - secretRef:
              name: continuous-integration-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      sidecars:
        - name: dind
          image: docker:19.03.8-dind
          command:
            - "dockerd"
            - "--host"
            - "tcp://0.0.0.0:2375"
          securityContext:
            privileged: true
        - name: docker-registry
          image: registry:latest
          command:
            - /bin/sh
            - -c
            - trap "exit 0" SIGKILL && ./entrypoint.sh /etc/docker/registry/config.yml
        - name: kafka
          image: wurstmeister/kafka:latest
          env:
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: localhost
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: localhost:2181
        - name: mongo
          image: tenlastic/mongo-replica-set:latest
          env:
            - name: REPLICA_SET_HOSTNAME
              value: localhost
        - name: minio
          image: minio/minio:latest
          command:
            - minio
            - server
            - /data
        - name: rabbitmq
          image: rabbitmq
        - name: zookeeper
          image: wurstmeister/zookeeper:latest
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: publish-docker-images
      container:
        image: node:10
        command: [sh]
        args: [./.argo/publish-docker-images.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: publish-electron-applications
      container:
        image: electronuserland/builder:wine
        command: [sh]
        args: [./.argo/publish-electron-applications.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: publish-miscellaneous-docker-images
      container:
        image: docker:19.03.8
        command: [sh]
        args: [./.argo/publish-miscellaneous-docker-images.sh]
        env:
          - name: DOCKER_HOST
            value: 127.0.0.1
        envFrom:
          - secretRef:
              name: continuous-deployment-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      sidecars:
        - name: dind
          image: docker:19.03.8-dind
          command:
            - "dockerd"
            - "--host"
            - "tcp://0.0.0.0:2375"
          securityContext:
            privileged: true
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: publish-npm-modules
      container:
        image: node:10
        command: [sh]
        args: [./.argo/publish-npm-modules.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment-environment-variables
        volumeMounts:
          - name: continuous-deployment-ssh-keys
            mountPath: /root/.ssh/
            readOnly: true
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError

    - name: terraform
      container:
        image: hashicorp/terraform:0.11.13
        command: [sh]
        args: [./.argo/terraform.sh]
        envFrom:
          - secretRef:
              name: continuous-deployment-environment-variables
        volumeMounts:
          - name: workspace
            mountPath: /usr/src/
        workingDir: /usr/src/app/
      retryStrategy:
        limit: 2
        retryPolicy: OnError
