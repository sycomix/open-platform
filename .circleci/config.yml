version: 2.1

commands:
  copy_directory:
    parameters:
      from:
        type: string
      label:
        type: string
      to:
        type: string
    steps:
      - run:
          name: << parameters.label >>
          command: |
            set -exu
            mkdir -p << parameters.to >>
            mv << parameters.from >> << parameters.to >>

  install_node_modules:
    parameters:
      directory:
        type: string
      label:
        type: string
        default: Install Node Modules
    steps:
      - restore_cache:
          key: dependency-cache-{{ checksum "<< parameters.directory >>/package.json" }}
      - run:
          name: Install Node Modules
          command: npm install
          working_directory: << parameters.directory >>/
      - run:
          name: Lerna Bootstrap
          command: npm run lerna bootstrap
          working_directory: << parameters.directory >>/
      - save_cache:
          key: dependency-cache-{{ checksum "<< parameters.directory >>/package.json" }}
          paths:
            - << parameters.directory >>/node_modules/

jobs:
  angular:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - install_node_modules:
          directory: ./projects/angular/
      - run:
          name: Lint
          command: npm run lerna run lint
          working_directory: ./projects/angular/
      - run:
          name: Build
          command: npm run lerna run build
          working_directory: ./projects/angular/
      - run:
          name: Test
          command: npm run lerna run -- --concurrency 1 test:ci -- -- --code-coverage
          working_directory: ./projects/angular/

  nodejs:
    docker:
      - image: node:10
      - image: wurstmeister/kafka:latest
        environment:
          KAFKA_ADVERTISED_HOST_NAME: localhost
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      - image: mongo:4
      - image: rabbitmq:latest
      - image: wurstmeister/zookeeper:latest
    steps:
      - checkout
      - install_node_modules:
          directory: ./projects/nodejs/
      - run:
          name: Lint
          command: npm run lerna run lint
          working_directory: ./projects/nodejs/
      - run:
          name: Build
          command: npm run lerna run build
          working_directory: ./projects/nodejs/
      - run:
          name: Test
          command: npm run lerna run -- --concurrency 1 test -- -- --coverage
          working_directory: ./projects/nodejs/
      - run:
          name: Merge Test Results
          command: npm run merge:junit
          working_directory: ./projects/nodejs/
          when: always
      - run:
          name: Merge Code Coverage
          command: npm run merge:coverage
          working_directory: ./projects/nodejs/
          when: always
      - run:
          name: Merge Mochawesome
          command: npm run merge:mochawesome
          working_directory: ./projects/nodejs/
          when: always
      - store_test_results:
          path: ./projects/nodejs/test-results/
      - store_artifacts:
          path: ./projects/nodejs/test-results/
          destination: test-results

  publish_nodejs_docker_images:
    docker:
      - image: node:10
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - install_node_modules:
          directory: /tmp/workspace/projects/nodejs/
      - run:
          name: Build
          command: npm run lerna run build
          working_directory: /tmp/workspace/projects/nodejs/
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="18.06.3-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Build Docker Images
          command: npm run lerna run docker:build
          working_directory: /tmp/workspace/projects/nodejs/
      - run:
          name: Push Docker Images
          command: npm run lerna run docker:push
          working_directory: /tmp/workspace/projects/nodejs/

  publish_nodejs_npm_modules:
    docker:
      - image: node:10
    steps:
      - checkout
      - install_node_modules:
          directory: ./projects/nodejs/
      - run:
          name: Build
          command: npm run lerna run build
          working_directory: ./projects/nodejs/
      - run:
          name: Update Git Credentials
          command: |
            git config user.email $GITHUB_USER_EMAIL
            git config user.name $GITHUB_USER_NAME
      - run:
          name: Version NPM Modules
          command: |
            npm run lerna -- version \
              --exact \
              --message "nodejs-v%v [ci skip]" \
              --tag-version-prefix nodejs-v \
              --yes \
              patch
          working_directory: ./projects/nodejs/
      - run:
          name: Create NPMRC File for NPM
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Publish Node Modules to NPM
          command: |
            npm run lerna -- publish \
              --yes \
              from-package
          working_directory: ./projects/nodejs/
      - run:
          name: Create NPMRC File for Github
          command: |
            echo "@tenlastic:registry=https://npm.pkg.github.com" > ~/.npmrc
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
      - run:
          name: Publish Node Modules to Github
          command: |
            npm run lerna -- publish \
              --registry https://npm.pkg.github.com \
              --yes \
              from-package
          working_directory: ./projects/nodejs/
      - copy_directory:
          label: Persist NodeJS Directory
          from: ./projects/nodejs/*
          to: /tmp/workspace/projects/nodejs/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - projects/nodejs/
  terraform:
    docker:
      - image: hashicorp/terraform:0.11.13
    steps:
      - checkout
      - run:
          name: Apply Custom Roles
          command: |
            terraform init -backend-config="./backend.example.tfvars"
            terraform apply -auto-approve
          working_directory: ./gcp/terraform/custom-roles/
      - run:
          name: Apply Cluster
          command: |
            terraform init -backend-config="./backend.example.tfvars"
            terraform apply -auto-approve
          working_directory: ./gcp/terraform/cluster/

workflows:
  version: 2.1
  build-deploy:
    jobs:
      - angular
      - nodejs:
          context: open-platform-review
      - publish_nodejs_npm_modules:
          filters:
            branches:
              only: master
          requires:
            - angular
            - nodejs
      - publish_nodejs_docker_images:
          requires:
            - publish_nodejs_npm_modules
      - terraform:
          filters:
            branches:
              only: master
          requires:
            - angular
            - nodejs
