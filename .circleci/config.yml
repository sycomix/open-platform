version: 2.1

commands:
  build_and_push_docker_image:
    parameters:
      directory:
        type: string
      label:
        type: string
      repository:
        type: string
    steps:
      - run:
          name: Build Docker Image (<< parameters.label >>)
          command: docker build -t << parameters.repository >>:latest ./
          working_directory: << parameters.directory >>
      - run:
          name: Push Docker Image (<< parameters.label >>)
          command: |
            IMAGE_ID=$(docker images << parameters.repository >>:latest --format "{{.ID}}")
            URL="tenlastic/<< parameters.repository >>"

            # Authenticate to Github Package Registry.
            docker login \
              -u "${DOCKER_HUB_USERNAME}" \
              -p "${DOCKER_HUB_PASSWORD}"

            # Tag and push version to Docker Hub.
            docker tag "${IMAGE_ID}" "${URL}:latest"
            docker push "${URL}:latest"

            # Tag and push latest version to Docker Hub.
            docker tag "${IMAGE_ID}" "${URL}:latest"
            docker push "${URL}:latest"

            URL="docker.pkg.github.com/tenlastic/open-platform/<< parameters.repository >>"

            # Authenticate to Github Package Registry.
            docker login docker.pkg.github.com \
              -u "${GITHUB_USER_EMAIL}" \
              -p "${GITHUB_TOKEN}"

            # Tag and push version to Github Package Registry.
            docker tag "${IMAGE_ID}" "${URL}:latest"
            docker push "${URL}:latest"

            # Tag and push latest version to Github Package Registry.
            docker tag "${IMAGE_ID}" "${URL}:latest"
            docker push "${URL}:latest"

  copy_directory:
    parameters:
      from:
        type: string
      label:
        type: string
      to:
        type: string
    steps:
      - run:
          name: << parameters.label >>
          command: |
            set -exu
            mkdir -p << parameters.to >>
            mv << parameters.from >> << parameters.to >>

  fetch_master_branch:
    steps:
      - run:
          name: Update Git Credentials
          command: |
            git config user.email $GITHUB_USER_EMAIL
            git config user.name $GITHUB_USER_NAME
      - run:
          name: Fetch Master Branch
          command: |
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [[ "$BRANCH" != "master" ]]; then
              git fetch --force origin "master:master"
              git pull --force origin "master:master"
              git show-branch
            fi

  install_docker_client:
    steps:
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="18.06.3-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

  install_google_chrome:
    steps:
      - run:
          name: Install Google Chrome
          command: |
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
            sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            apt-get update && apt-get install -yq google-chrome-stable

  install_node_modules:
    parameters:
      directory:
        type: string
      label:
        type: string
        default: Install Node Modules
    steps:
      - restore_cache:
          key: dependency-cache-{{ checksum "<< parameters.directory >>/package.json" }}
      - run:
          name: Install Node Modules
          command: npm ci
          working_directory: << parameters.directory >>/
      - run:
          name: Install Lerna
          command: npm i -g lerna
          working_directory: << parameters.directory >>/
      - run:
          name: Lerna Bootstrap
          command: lerna bootstrap
          working_directory: << parameters.directory >>/
      - save_cache:
          key: dependency-cache-{{ checksum "<< parameters.directory >>/package.json" }}
          paths:
            - << parameters.directory >>/node_modules/

jobs:
  angular:
    docker:
      - image: node:10
    steps:
      - install_google_chrome
      - checkout
      - fetch_master_branch
      - install_node_modules:
          directory: ./projects/angular/
      - run:
          name: Lint
          command: lerna run --since master lint
          working_directory: ./projects/angular/
      - run:
          name: Build
          command: |
            lerna run --no-private build
            lerna run --concurrency 1 --since master build:production
          working_directory: ./projects/angular/
      - run:
          name: Test
          command: lerna run --concurrency 1 --since master test:ci
          working_directory: ./projects/angular/

  nodejs:
    docker:
      - image: node:10
      - image: wurstmeister/kafka:latest
        environment:
          KAFKA_ADVERTISED_HOST_NAME: localhost
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      - image: mongo:4
      - image: rabbitmq:latest
      - image: wurstmeister/zookeeper:latest
    steps:
      - checkout
      - fetch_master_branch
      - install_node_modules:
          directory: ./projects/nodejs/
      - run:
          name: Lint
          command: lerna run --since master lint
          working_directory: ./projects/nodejs/
      - run:
          name: Build
          command: |
            lerna run --no-private build
            lerna run --since master build
          working_directory: ./projects/nodejs/
      - run:
          name: Test
          command: lerna run --concurrency 1 --since master test -- --coverage
          working_directory: ./projects/nodejs/
      - run:
          name: Merge Test Results
          command: npm run merge:junit
          working_directory: ./projects/nodejs/
          when: always
      - run:
          name: Merge Code Coverage
          command: npm run merge:coverage
          working_directory: ./projects/nodejs/
          when: always
      - run:
          name: Merge Mochawesome
          command: npm run merge:mochawesome
          working_directory: ./projects/nodejs/
          when: always
      - store_test_results:
          path: ./projects/nodejs/test-results/
      - store_artifacts:
          path: ./projects/nodejs/test-results/
          destination: test-results

  publish_docker_images:
    docker:
      - image: node:10
    steps:
      - setup_remote_docker
      - install_docker_client
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Lerna
          command: npm i -g lerna
      - run:
          name: Build Docker Images (Angular)
          command: lerna run docker:build
          working_directory: /tmp/workspace/projects/angular/
      - run:
          name: Push Docker Images (Angular)
          command: lerna run docker:push
          working_directory: /tmp/workspace/projects/angular/
      - run:
          name: Build Docker Images (NodeJS)
          command: lerna run docker:build
          working_directory: /tmp/workspace/projects/nodejs/
      - run:
          name: Push Docker Images (NodeJS)
          command: lerna run docker:push
          working_directory: /tmp/workspace/projects/nodejs/

  publish_electron_applications:
    docker:
      - image: electronuserland/builder:wine
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - install_node_modules:
          directory: /tmp/workspace/projects/angular/
      - run:
          name: Install Electron Builder Dependencies
          command: lerna run electron:install
          working_directory: /tmp/workspace/projects/angular/
      - run:
          name: Build and Publish Electron Applications
          command: lerna run electron:windows
          working_directory: /tmp/workspace/projects/angular/

  publish_miscellaneous_docker_images:
    docker:
      - image: node:10
    steps:
      - setup_remote_docker
      - install_docker_client
      - checkout
      - build_and_push_docker_image:
          directory: ./
          label: Infrastructure Utilities
          repository: infrastructure-utilities
      - build_and_push_docker_image:
          directory: ./projects/nodejs/dockerfiles/mongo-replica-set/
          label: MongoDB Replica Set
          repository: mongo-replica-set

  publish_npm_modules:
    docker:
      - image: node:10
    steps:
      - checkout
      - run:
          name: Update Git Credentials
          command: |
            git config user.email $GITHUB_USER_EMAIL
            git config user.name $GITHUB_USER_NAME
      - install_node_modules:
          directory: ./projects/angular/
          label: Install Node Modules (Angular)
      - run:
          name: Build (Angular)
          command: |
            lerna run --no-private build
            lerna run --concurrency 1 build:production
          working_directory: ./projects/angular/
      - run:
          name: Update Version (Angular)
          command: |
            npm config set unsafe-perm true
            lerna version \
              --exact \
              --no-git-tag-version
              --yes \
              patch
            npm config set unsafe-perm false
          working_directory: ./projects/angular/
      - install_node_modules:
          directory: ./projects/nodejs/
          label: Install Node Modules (NodeJS)
      - run:
          name: Build (NodeJS)
          command: lerna run build
          working_directory: ./projects/nodejs/
      - run:
          name: Publish Node Modules to NPM (NodeJS)
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

            npm config set unsafe-perm true
            lerna publish \
              --exact \
              --message "nodejs-v%v [skip ci]" \
              --tag-version-prefix nodejs-v \
              --yes \
              patch
            npm config set unsafe-perm true
          working_directory: ./projects/nodejs/
      - run:
          name: Publish Node Modules to Github (NodeJS)
          command: |
            echo "@tenlastic:registry=https://npm.pkg.github.com" > ~/.npmrc
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc

            lerna publish \
              --registry https://npm.pkg.github.com \
              --yes \
              from-package
          working_directory: ./projects/nodejs/
      - run:
          name: Delete Node Modules (Angular)
          command: find . -name "node_modules" -exec rm -rf '{}' +
          working_directory: ./projects/angular/
      - copy_directory:
          label: Persist Angular Directory
          from: ./projects/angular/*
          to: /tmp/workspace/projects/angular/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - projects/angular/
      - run:
          name: Delete Node Modules (NodeJS)
          command: find . -name "node_modules" -exec rm -rf '{}' +
          working_directory: ./projects/nodejs/
      - copy_directory:
          label: Persist NodeJS Directory
          from: ./projects/nodejs/*
          to: /tmp/workspace/projects/nodejs/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - projects/nodejs/

  terraform:
    docker:
      - image: hashicorp/terraform:0.11.13
    steps:
      - checkout
      - run:
          name: Apply Custom Roles
          command: |
            terraform init -backend-config="./backend.example.tfvars"
            terraform apply -auto-approve
          working_directory: ./gcp/terraform/custom-roles/
      - run:
          name: Apply Cluster
          command: |
            terraform init -backend-config="./backend.example.tfvars"
            terraform apply -auto-approve
          working_directory: ./gcp/terraform/cluster/

workflows:
  version: 2.1
  build-deploy:
    jobs:
      - angular
      - nodejs:
          context: open-platform-review

      - publish_miscellaneous_docker_images:
          filters:
            branches:
              only: master
          requires:
            - angular
            - nodejs

      - publish_npm_modules:
          filters:
            branches:
              only: master
          requires:
            - angular
            - nodejs
      - publish_docker_images:
          requires:
            - publish_npm_modules
      - publish_electron_applications:
          requires:
            - publish_npm_modules

      - terraform:
          filters:
            branches:
              only: master
          requires:
            - angular
            - nodejs
