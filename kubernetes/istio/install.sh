#!/usr/bin/env bash
set -e

DIRNAME=$(dirname $0)

# Install CertManager.
"${DIRNAME}/../cert-manager/install.sh"

# Initialize istio-system namespace.
kubectl apply -f "${DIRNAME}/manifests/namespace.yml"

# Initialize Istio.
helm upgrade istio-init "${DIRNAME}/helm/istio-init-1.1.0.tgz" \
  --install \
  --namespace "istio-system"

# Wait for install to finish.
echo "Waiting for install to finish..."
sleep 30

# Get static IP address from Terraform.
cd "${DIRNAME}/../../gcloud/terraform/cluster/"
ISTIO_IP_ADDRESS=$(terraform output istio_ip_address)
cd "${DIRNAME}"

# Install Istio.
helm upgrade istio "${DIRNAME}/helm/istio-1.1.0.tgz" \
  --install \
  --namespace "istio-system" \
  --set gateways.istio-ingressgateway.loadBalancerIP="${ISTIO_IP_ADDRESS}" \
  --values "${DIRNAME}/helm/values.yml"

# Redirect from HTTP to HTTPS.
kubectl -n istio-system patch gateway istio-autogenerated-k8s-ingress \
  --type "json" \
  -p '[{"op": "replace", "path": "/spec/servers/0/tls", "value": {"httpsRedirect": true}}]'

# Load SSL certificate for HTTPS requests.
kubectl -n istio-system patch gateway istio-autogenerated-k8s-ingress \
  --type "json" \
  -p '[{"op": "replace", "path": "/spec/servers/1/tls", "value": {"mode": "SIMPLE","privateKey":"/etc/istio/ingressgateway-certs/tls.key","serverCertificate":"/etc/istio/ingressgateway-certs/tls.crt"}}]'

# Create Wildcard Certificate.
kubectl apply -f "${DIRNAME}/manifests/certificate.yml"

# Wait for certificate to provision.
echo "Waiting for certificate..."
sleep 60

# Restart Istio Ingressgateway to reload certificate.
export TIMESTAMP=$(date +%s)
kubectl patch deployment -n istio-system  istio-ingressgateway \
  -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"${TIMESTAMP}\"}}}}}"
