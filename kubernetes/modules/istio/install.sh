#!/usr/bin/env bash
set -e

DIRNAME=$(dirname $0)
ISTIO_VERSION="1.4.0"

# Initialize istio-system namespace.
kubectl apply -f "${DIRNAME}/manifests/namespace.yml"

# Initialize secret for Kiali.
kubectl apply -f "${DIRNAME}/manifests/kiali.secret.yml"

if [ ! -f "${DIRNAME}/bin/istio-init-${ISTIO_VERSION}.tgz" ] && [ ! -f "${DIRNAME}/bin/istio-${ISTIO_VERSION}.tgz" ]; then
  # Download Istio.
  mkdir -p "${DIRNAME}/bin/"
  wget -O "${DIRNAME}/bin/istio-${ISTIO_VERSION}.tar.gz" "https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-linux.tar.gz"

  # Extract Istio.
  mkdir -p "${DIRNAME}/bin/istio-${ISTIO_VERSION}/"
  tar xvzf "${DIRNAME}/bin/istio-${ISTIO_VERSION}.tar.gz" -C "${DIRNAME}/bin/"

  # Compress Helm Charts.
  helm package "${DIRNAME}/bin/istio-${ISTIO_VERSION}/install/kubernetes/helm/istio-init" -d "${DIRNAME}/bin/"
  helm package "${DIRNAME}/bin/istio-${ISTIO_VERSION}/install/kubernetes/helm/istio" -d "${DIRNAME}/bin/"
fi

# Initialize Istio.
helm template "${DIRNAME}/bin/istio-init-${ISTIO_VERSION}.tgz" \
  --name "istio-init" \
  --namespace "istio-system" \
  | kubectl apply -f -

# Wait for install to finish.
echo "Waiting for install to finish..."
kubectl wait job \
  --all \
  --for "condition=complete" \
  --namespace "istio-system"

# Get static IP address from Terraform.
cd "${DIRNAME}/../../../gcp/terraform/cluster/"
export ISTIO_IP_ADDRESS=$(terraform output istio_ip_address)
cd "../../../"

# Install Istio.
helm template "${DIRNAME}/bin/istio-${ISTIO_VERSION}.tgz" \
  --name "istio" \
  --namespace "istio-system" \
  --set gateways.istio-ingressgateway.loadBalancerIP="${ISTIO_IP_ADDRESS}" \
  --values "${DIRNAME}/helm/values.yml" \
  | kubectl apply -f -

# Redirect from HTTP to HTTPS.
kubectl -n istio-system patch gateway istio-autogenerated-k8s-ingress \
  --type "json" \
  -p '[{"op": "replace", "path": "/spec/servers/0/tls", "value": {"httpsRedirect": true}}]'

# Load SSL certificate for HTTPS requests.
kubectl -n istio-system patch gateway istio-autogenerated-k8s-ingress \
  --type "json" \
  -p '[{"op": "replace", "path": "/spec/servers/1/tls", "value": {"mode": "SIMPLE","privateKey":"/etc/istio/ingressgateway-certs/tls.key","serverCertificate":"/etc/istio/ingressgateway-certs/tls.crt"}}]'

# Create Wildcard Certificate.
kubectl apply -f "${DIRNAME}/manifests/certificate.yml"

# Wait for certificate to provision.
echo "Waiting for certificate..."
sleep 60

# Restart Istio Ingressgateway to reload certificate.
export TIMESTAMP=$(date +%s)
kubectl patch deployment -n istio-system  istio-ingressgateway \
  -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"${TIMESTAMP}\"}}}}}"

# Initialize virtual service for Kiali.
kubectl apply -f "${DIRNAME}/manifests/kiali.virtual-service.yml"
